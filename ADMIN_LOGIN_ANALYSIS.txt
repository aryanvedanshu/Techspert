# ADMIN LOGIN SYSTEM ANALYSIS
# ============================

## FRONTEND COMPONENTS
# ====================

### AdminLogin.jsx Variables:
- email: string (user input)
- password: string (user input) 
- loading: boolean (form state)
- error: string (error message)
- formData: object { email, password }
- handleSubmit: function (form submission)
- handleChange: function (input change handler)

### API Service (api.js):
- baseURL: 'http://localhost:5000/api'
- timeout: 10000ms
- headers: { 'Content-Type': 'application/json' }
- interceptors: request/response handlers
- token storage: localStorage.getItem('accessToken')

## BACKEND COMPONENTS  
# ===================

### Admin Model (Admin.js):
- email: String (required, unique, lowercase)
- password: String (required, minlength: 6)
- role: String (default: 'admin')
- isActive: Boolean (default: true)
- lastLogin: Date
- pre-save middleware: bcrypt password hashing

### Admin Controller (adminController.js):
- loginAdmin: POST /api/admin/login
  - Input: { email, password }
  - Validation: email/password required
  - Process: find admin, compare password, generate JWT
  - Output: { success, token, admin: { id, email, role } }

### Admin Routes (admin.js):
- POST /login - admin login endpoint
- GET /profile - get admin profile (protected)
- PUT /profile - update admin profile (protected)

## MIDDLEWARE COMPONENTS
# ======================

### Auth Middleware (auth.js):
- authenticateAdmin: JWT token verification
- requireRole: role-based access control
- protect: alias for authenticateAdmin
- authorize: alias for requireRole

### Error Handler (errorHandler.js):
- Global error handling middleware
- JWT error handling
- Validation error handling
- Database error handling

## DEMO CREDENTIALS
# =================

### Super Admin Account:
Email: admin@techspert.com
Password: admin123456
Role: super-admin

### Manager Account:
Email: manager@techspert.com
Password: manager123456
Role: admin

### Moderator Account:
Email: moderator@techspert.com
Password: moderator123456
Role: moderator

## CRITICAL ISSUES FOUND
# ======================

### 1. CORS Configuration Missing
- Frontend (localhost:5173) blocked by CORS policy
- Backend not allowing cross-origin requests
- Need to configure CORS middleware

### 2. Rate Limiting Issues
- 429 Too Many Requests errors
- Server rejecting multiple API calls
- Need to adjust rate limiting or implement retry logic

### 3. Database Connection Issues
- Frequent disconnections between frontend and backend
- Need to check MongoDB connection stability
- Implement connection retry logic

### 4. Admin Authentication Flow
- Need to verify JWT token generation
- Check password hashing in seed data
- Ensure proper token storage and retrieval

## FIXES REQUIRED
# ===============

1. Fix CORS configuration in server
2. Adjust rate limiting settings
3. Implement database connection retry
4. Verify admin seed data and authentication
5. Add comprehensive error handling
6. Implement request retry logic in frontend
